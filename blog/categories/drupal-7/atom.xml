<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Drupal 7 | Vợ Ba Con]]></title>
  <link href="http://v3k.net/blog/categories/drupal-7/atom.xml" rel="self"/>
  <link href="http://v3k.net/"/>
  <updated>2014-01-09T21:47:17+07:00</updated>
  <id>http://v3k.net/</id>
  <author>
    <name><![CDATA[Andy Truong]]></name>
    <email><![CDATA[v3knet@toila.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Drupal 7.25]]></title>
    <link href="http://v3k.net/blog/2014/01/09/drupal-7-dot-25/"/>
    <updated>2014-01-09T21:45:34+07:00</updated>
    <id>http://v3k.net/blog/2014/01/09/drupal-7-dot-25</id>
    <content type="html"><![CDATA[<p><a href="https://drupal.org/drupal-7.25-release-notes">Release notes</a> còn nhiều mục khác
nữa, tôi không thấy hứng thú gì với mấy cái đó nên khỏi note.</p>

<!-- more -->


<blockquote><p>Added an optional feature to the Statistics module to allow node views to be
tracked by Ajax requests rather than during the server-side generation of the
page. This allows the node counter to work on sites that use external page
caches (string change and new administrative option: <a href="https://drupal.org/node/2164069">https://drupal.org/node/2164069</a>).</p></blockquote>

<p>Tính năng rất thú vị cho các website chịu tải cao nhưng vẫn sử dụng module
statistic #performance #statistics</p>

<blockquote><p>Added a meta tag to install.php to prevent it from being indexed by search
engines even when Drupal is installed in a subfolder (minor markup change).</p></blockquote>

<p>Nhớ có lần tôi truy cập vào domain nọ, bản Drupal của họ chỉ để đó, chưa có
install gì hết. Tôi cài giùm họ, cấu hình với SQlite database, kết quả là Drupal
chạy vèo vèo. Lúc đó, tui mà táy máy, bật module PHP lên, rồi chạy các script độc
độc thì không biết sẽ lụm được gì trên con server đó nữa… Tới nay thì lỗi này đã
được fix rồi. Hôm nay đọc thấy cái fix này, tôi thấy cũng hay hay #install #seo</p>

<blockquote><p>Performance improvement: Prevented block rehashing from writing blocks to the
database on every cache clear and cron run when the blocks have not changed.
This fix results in an extra &lsquo;saved&rsquo; key which is added and set to TRUE for
each block returned by _block_rehash() that actually is saved to the database
(data structure change).</p></blockquote>

<p>Bắt bệnh hay #performance #hash</p>

<blockquote><p>Added an optional &lsquo;skip on cron&rsquo; parameter to hook_cron_queue_info() to allow
queues to avoid being automatically processed on cron runs (API addition).</p></blockquote>

<p>Chừ thì tôi mới biết có hook này tồn tại ((= #hook #cron #api</p>

<blockquote><p>Made the File and Image modules more robust when saving entities that have
deleted files attached. The code in file_field_presave() will now remove the
record of the deleted file from the entity before saving (minor data structure
change).</p></blockquote>

<p>DB sạch hơn chút với patch này.</p>

<blockquote><p>Fixed broken tests on PHP 5.5.</p></blockquote>

<p>Có vẻ như Drupal 7 chạy rất ổn định trên PHP 5.5? Có thể, nhưng tôi chỉ e ngại
các module mở rộng! #php55 #stable #qa</p>

<blockquote><p>Changed the database API to allow inserts based on a SELECT * query to work
correctly.</p></blockquote>

<p>Tính năng hay nhưng rất ít khi tôi sử dụng, <code>INSERT INTO … SELECT …</code>, người ta
dùng nhiều và có bug, và bug đã fix #sql #db</p>

<blockquote><p>Changed the database schema of the {file_managed} table to allow Drupal to
manage files larger than 4 GB.</p></blockquote>

<p>Ghê! Dùng Drupal lưu trữ file 4GB luôn #db #schema</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bootstrap Page Cache - Drupal 7]]></title>
    <link href="http://v3k.net/blog/2013/12/27/bootstrap-page-cache-drupal-7/"/>
    <updated>2013-12-27T16:10:17+07:00</updated>
    <id>http://v3k.net/blog/2013/12/27/bootstrap-page-cache-drupal-7</id>
    <content type="html"><![CDATA[<p>Hôm nay, tôi có đụng tới phần cache của cái bộ route trong Drupal 7, nên muốn đi
coi kỹ lại phần bootstrap của Drupal.</p>

<!-- more -->


<p>Bootstrap của Drupal 7 gồm có các bước sau, tui chỉ copy lại từ phần comment của
hàm drupal_bootstrap() thôi.</p>

<ul>
<li><strong>DRUPAL_BOOTSTRAP_CONFIGURATION</strong>: Initializes configuration.</li>
<li><strong>DRUPAL_BOOTSTRAP_PAGE_CACHE</strong>: Tries to serve a cached page.</li>
<li><strong>DRUPAL_BOOTSTRAP_DATABASE</strong>: Initializes the database layer.</li>
<li><strong>DRUPAL_BOOTSTRAP_VARIABLES</strong>: Initializes the variable system.</li>
<li><strong>DRUPAL_BOOTSTRAP_SESSION</strong>: Initializes session handling.</li>
<li><strong>DRUPAL_BOOTSTRAP_PAGE_HEADER</strong>: Sets up the page header.</li>
<li><strong>DRUPAL_BOOTSTRAP_LANGUAGE</strong>: Finds out the language of the page.</li>
<li><strong>DRUPAL_BOOTSTRAP_FULL</strong>: Fully loads Drupal. Validates and fixes input data.</li>
</ul>


<p>Mấy phần khác tui không quan tâm lắm, tui chỉ quan tâm tới cái bước
DRUPAL_BOOTSTRAP_PAGE_CACHE. Nghĩa là để cho Drupal delivery được nội dung
tới người dùng cuối mà không có đụng tới DB, tui cần phải làm gì. Tui coi tới
coi lui, thì tạm kết luận, cái luồng của nó như sau:</p>

<ul>
<li>_drupal_bootstrap_page_cache()</li>
<li>If variable_get(&lsquo;page_cache_without_database&rsquo;),

<ul>
<li>then $conf[&lsquo;cache&rsquo;] is true. There is no DB bootstrap here.</li>
<li>else, force drupal boots DRUPAL_BOOTSTRAP_DATABASE and DRUPAL_BOOTSTRAP_VARIABLES</li>
</ul>
</li>
<li>If !$conf[&lsquo;cache&rsquo;], no page cache, boot to next step.</li>
<li>If User IP is block, return 403, exit &mdash; drupal_is_denied() only query db if db
connection is available</li>
<li>If user has cookie, or the request is not cachable

<ul>
<li>Then, header has &lsquo;X-Drupal-Cache: MISS&rsquo;</li>
<li>Else, get cached content

<ul>
<li>Cache ID: $base_root . request_uri()</li>
<li>Cache Bin: cache_page</li>
<li>Cachable: Http Method = GET/HEAD, !drupal_is_cli()</li>
<li>Cached data must be array(), has key path, title, …</li>
<li>If $conf[&lsquo;page_cache_invoke_hooks&rsquo;] > invoke hook_boot</li>
<li>Delivery content &mdash; drupal_serve_page_from_cache($cache)</li>
<li>If $conf[&lsquo;page_cache_invoke_hooks&rsquo;] > invoke hook_exit</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>Vậy thôi, hy vọng note này giúp ích gì đó cho người tìm kiếm trên Google.</p>

<p><strong>Vợ Ba Con</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[At Base Module]]></title>
    <link href="http://v3k.net/blog/2013/12/26/at-base-module/"/>
    <updated>2013-12-26T22:28:42+07:00</updated>
    <id>http://v3k.net/blog/2013/12/26/at-base-module</id>
    <content type="html"><![CDATA[<p><img class="right <a" src="href="https://drupal.org/files/project-images/godrop.png">https://drupal.org/files/project-images/godrop.png</a>" title="Icon" ></p>

<p>Xin lỗi các bạn nhe, tui viết bài này bằng tiếng Anh để làm tài liệu cho anh em
trong nhóm làm việc của tui luôn.</p>

<p>Lúc tui viết trang này thì Drupal 8 đang phát triển. Tui không lầm thì phiên bản
alpha 7 vừa ra đời cách đây vài ngày.</p>

<!-- more -->


<p>Tui rất là thích thú theo dõi các nền tảng web. Tui thích rất nhiều, RoR, Sinatra,
Django, Symfony, Doctrine, … và đặc biệt là Drupal. Dầu là chưa có commit nào cho
Drupal 8, nhưng tui theo dõi Drupal hàng tuần, cứ rảnh là tui coi coi, người ta
bỏ gì ra, thêm gì vô, … phải nói là Drupal 8 thay đổi rất nhiều, ngẫm đi ngẫm
lại, tui phải nói là tui nể ông Dries lắm luôn. Ổng làm một phát, từ Drupal 7 qua
Drupal 8, dầu cái mặt tiền còn na ná, nhưng cái mặt hậu thì như thay da đổi thịt
hoàn toàn. Nhiều người thấy Drupal 8 thay đổi quá, chịu không nổi, họ rẽ Drupal
ra nhánh khác, giữ lại mặt hậu của Drupal 7, gọi nó là BackdropCMS.</p>

<p>He he, nói xíu nữa là lạc đề luôn. Tui nói là tui theo dõi và tui học Drupal 8
thường xuyên. Học thì phải hành… đằng này Drupal 8 phát triển mấy năm nay, mới chỉ
ra được alpha 7, làm gì có project thiệt mà tui hành. Tui có thử port vài module
qua D8 rồi, nhưng đa phần nhỏ, bự thì làm không nổi, hoặc không có giờ làm :D…</p>

<p>Đó, đó, sự tình là vậy đó. Muốn xài công nghệ mới mà không có thì tui lấy mấy kiến
thức tui học lóm được bên D8, tui viết lại thành cái module <em>AT Base</em> này nè.
Càng viết càng thấy mê, càng thấy thích thú… cái thú vọc code. Thôi thì dong dài
đã nhiều, mời quý bạn của tui coi phần giới thiệu của tui cho mô-đun này nhe.</p>

<p>Xin lỗi lần nữa, tui phải viết tiếng Anh, cho đồng nghiệp ở VN với lại non-VN coi
nữa (tiếng Anh của tui không tốt lắm, nên tui đây mới xin lỗi, ha ha).</p>

<p>Quý bạn nào đọc rồi muốn tìm hiểu thêm thì <a href="https://github.com/andytruong/at_base">thẳng tiến vào Github</a> luôn nhe.</p>

<p><strong>Vợ Ba Con</strong></p>

<p><div><script src='https://gist.github.com/8052716.js'></script>
<noscript><pre><code>----------
## 1. Some userful functions

### 1.1 at_id()

With PHP before 5.4, we have this issue

```php
new Thing()-&gt;doStuff();
```

Give us fatal error.

With at_id(), we can do that a bit nicer

```php
at_id(new Thing())-&gt;doStuff();
```

Yep, simple, we no longer need unset the object after simple usage.

### 1.2. at_modules()

There are ways for developers on Drupal 7 to collect the modules:

```php
module_implements(‘hook_name’);
ctools_plugin_api_info(‘module_name&#39;, $api, &#39;1.0&#39;, &#39;1.0&#39;);
```

Which require other modules to implements hooks, just good, but not too fast. `at_modules()` is way faster:

`at_modules(‘at_base’)` return modules those has at_base as dependency. No hook needed.

### 1.3. at_library()

Return path to library.

* `at_library(‘pimple’) `
    * sites/domain.com/libraries/pimple
    * sites/all/libraries/pimple
* `at_library(‘pimple’, ‘v1.0.6’)`
    * sites/domain.com/libraries/pimple/v1.0.6/
    * sites/all/libraries/pimple/v1.0.6/

## 2. PSR-4 Autoloader

PSR-4 is supported for loading classes of modules which depends on at_base.module
For examples:

`\Drupal\my_module\My_Class -&gt; /path/to/my_module/lib/My_Class.php`

## 3. Caching

### 3.1. at_cache()

In Drupal, caching is a common problem. To execute a logic, then cache it, we usally use this style of code:

```php
function your_data_provider($reset = FALSE) {
  $cache_id = &#39;…&#39;;
  $bin = &#39;bin&#39;;
  $expire = strtotime(&#39;+ 15 minutes&#39;);
  if (!$reset &amp;&amp; $cache = cache_get($cache_id, $bin)) {
    return $cache-&gt;data;
  }
  $data = your_logic();
  cache_set($data, $cache_id, $bin, $expire);
  return $data;
}
```

It just good, but at_cache() provide us a fancy style:

````php
function your_data_provider() {
  return your_logic();
}

$options = array(
    &#39;cache_id&#39; =&gt; &#39;…&#39;, 
    &#39;bin&#39; =&gt; &#39;cache&#39;, 
    &#39;ttl&#39; =&gt; strtotime(&#39;+ 30 minutes&#39;)
);
$data = at_cache($options, &#39;your_data_provider&#39;);
```

### 3.2 Cache Tagging

Cache is easy, but cache invalid is hard, that’s why Drupal 8 added cache-tag supporting. Good news, at_cache() also support cache tagging too:

```php
$options = array(
    &#39;cache_id&#39; =&gt; &#39;…&#39;, 
    &#39;bin&#39; =&gt; &#39;cache&#39;, 
    &#39;ttl&#39; =&gt; strtotime(&#39;+ 30 minutes&#39;),
    &#39;tags&#39; =&gt; array(&#39;tag_1&#39;, &#39;tag_2&#39;)
);
$data = at_cache($options, &#39;your_data_provider&#39;);
```

Then, cached content is flushed after calling of:

    at_cache_flush_by_tags(array(‘tag_1’));

### 3.3 Cache Warming

Cache content are tagged, if there are center to manage the cache flushing, that will be great. An other good news, at_base.module support this too.

If our custom module depends on at_base, an we have the file: %module_name/config/cache_warming.yml

```yaml
tags:
  entity_update: [tag_1]
```

And if our module is enabled, on any entity updated, content tagged with tag_1 will be flushed.

There are some tokens are supported: %entity_type, %entity_bundle,e %entity_id

## 4. Config

At Drupal 7, to store the configuration, developers do use `variable_get()`, `variable_set()`, `variable_delete()`. We have some problem with Drupal 7 variable system:

* at any function, run `print_r($GLOBAL[‘config’])`. Oh! All variables are loaded… not good at all.
* Some variables are very important, what if the variable is deleted on product site?
* Revision. Features +  strongarm can resolve this issue just well. But some importants variables, we never want any changes on them.
* How to configure the variables on IDE, text editor? Not very easy!

Drupal 8 has excellent config system. Lack of resource, I just provide a simple config, no dev/live/staging mode, no writing, just reading, … it’s at_config()

at_config() is not too powerful, but I think this is some kind of useful though. In many part of at_base code, we can find heavy using of at_config().

Yes, this is very simple. If we have this file:

```yaml
# %module_name/config/config.yml
foo: bar
```

Then, at_config($module_name)-&gt;get(‘foo’) returns bar.

Ah, we found the YAML file there,  how at_config() can read it? No worry, move to next section please.

## 5. AT Require Drush command

After enable at_base.module, we need run: drush at_require at_base, AT Require system will read ./at_base/config/require.yml, its content is

```yaml
projects:
  spyc:
    type: library
    download:
      type: git
      url: https://github.com/mustangostang/spyc.git
      branch: 0.5.1
  pimple:
    type: library
    download:
      type: git
      url: https://github.com/fabpot/Pimple.git
      revision: v1.1.0
  twig:
    type: library
    download:
      type: git
      url: https://github.com/fabpot/Twig.git
      branch: v1.14.2
```

On run, the drush command, which depends on drush make system, will download all external libraries.

With this tool, we can:

* Exclude libraries from git repository.
* Drupal admin take less time for download dependencies
* If website need download the library regularly, like MaxMind database, this small tool is very useful too.

## 6. YAML

In previous sections, we already see the YAML format — clean, easy for reading, fast for writing. It’s really cool, Drupal 8 used it for Config System. With at_base module, we support YAML reading with some magic

### 6.1 Cache

No worry about the speed, all yaml content are cached once it’s read.

### 6.2 Import

In large system, we need a lot of config, which make the YAML file is no longer easy reading. For example, routing:

```yaml
# %module_name/config/route.yml
routes:
  route_1:
    access: …
  route_2:
    access: …
  route_n:
    access: …
```

With import feature, we can make the config file a bit more readble

```yaml
imports:
  - { resource: routes.admin.yml }
  - { resource: routes.user.yml }
  - { resource: routes.content.yml }
```

## 7. Easy Routing

We may already know new routing system in Drupal 8. Routing feature in at_base is not that powerful, but there’s are some cool features, something similar to Route in D8.

### 7.1 Controller

Modules depend at_base can define routes like this:

```yaml
# %module_name/config/routes.yml
routes:
  atest_route/controller:
    title: Hello
    access arguments: [&#39;access content&#39;]
    controller: [
        &#39;\Drupal\atest_route\Controller\HelloController&#39;, 
        helloAction, 
        {name: &#39;Andy Truong&#39;}]
```

Yeah, OOP controller. Cool? But we have more…

### 7.2 Form

Define form using class. Examle: http://goo.gl/Fkq7lO

### 7.3 Template

```yaml
# %module_name/config/routes.yml
routes:
  atest_route/template:
    title: Magic template
    access arguments: [&#39;access content&#39;]
    template: &#39;@atest_route/templates/hello.html.twig&#39;
    variables:
      name: Andy Truong
```

No controller need, use hello.html.twig to reponse content to client directly. And… twig template is also supported too:

```yaml
# %module_name/config/routes.yml
routes:
  &#39;atest_route/fancy_template/%user&#39;:
    title: Fancy Template
    access arguments: [&#39;access content&#39;]
    template_string: &#39;Foo: {{ foo }}&lt;br /&gt;- User ID: {{ user.uid }}&#39;
    variables: { foo: &#39;bar&#39; }
```

### 7.4 Old style Drupal

And old style Drupal menu item is also suppoted:

```yaml
# %module_name/config/routes.yml
routes:
  atest_route/drupal:
    title: Hello
    title callback: t
    title arguments: []
    description: &#39;Description for the page&#39;
    page callback: atest_route_page_callback
    page arguments: [&#39;Andy Truong&#39;]
    access callback: user_access
    access arguments: [&#39;access content&#39;]
    theme callback: trim # function_to_detect_theme_name
    theme arguments: [seven]
    file: atest_route.pages.inc
    load arguments: []
    weight: 0
    menu_name: navigation
    expanded: TRUE
    context: MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE
    tab_parent: admin/people
    tab_root: admin/people
    position: left
    type: MENU_NORMAL_ITEM
```

### 7.5 Asset attachment

But the killer feature is asset attachment. With at_base, we can let the controller just handle the logic:

```yaml
# %module_name/config/routes.yml
routes:
  atest_route/with_assets:
    title: Route with attached assets
    access arguments: [&#39;access arguments&#39;]
    template_string: &#39;Simple string&#39;
    attached:
      css:
        - misc/vertical-tabs.css
      js:
        - misc/vertical-tabs.js
      library:
        - [&#39;system&#39;, &#39;jquery.bbq&#39;]
```

I hope you like it.

## 8. Easy Block

Block can be easy defined in Drupal 7 with hook_block_info() and hook_block_view() implementations. I wanted bring some cool features in Routing system to block. Here we go:

```yaml
# %module/config/blocks.yml
blocks:
  hi_s:
    info: &#39;Hello String&#39;
    subject: &#39;Hello String&#39;
    cache: DRUPAL_CACHE_PER_ROLE
    content: &#39;Hello Andy Truong&#39;
  hi_t:
    info: &#39;Hello template&#39;
    subject: &#39;Hello template&#39;
    cache: DRUPAL_CACHE_PER_PAGE
    content:
      template: &#39;@atest_block/templates/block/hello_template.html.twig&#39;
      variables: {name: &#39;Andy Truong&#39;}
  hi_ts:
    info: &#39;Hello Template String&#39;
    subject: &#39;Hello Template String&#39;
    content:
      template_string: &quot;Hello {{ name }}&quot;
      variables: {name: &#39;Andy Truong&#39;}
```

Easy for reading and using.

### 9. Service Container

Dependency Injection is a required in all good system recently. Based on Pimple of Fabio Potencier, we now have a simple Dependency Injection system in Drupal 7 too.

If we have:

```yaml
# atest_base/config/services.yml
services:
  atest_base.service_1:
    class: &#39;Drupal\atest_base\Service_1&#39;
  atest_base.service_2:
    class: &#39;Drupal\atest_base\Service_2&#39;
    arguments: [&#39;@atest_base.service_1&#39;]
  atest_base.service_3:
    class: &#39;Drupal\atest_base\Service_3&#39;
    factory_class: Drupal\atest_base\Service_3_Factory
    factory_method: getService
```

Then, services can be easy created:

```php
$service_3 = at_container(‘atest_base.service_3’);
```

## 10. Twig

I already metioned about Twig in previous sections. It’s a super powerfull Template engine, Drupal 8 used it. I can not wait to use it — added to at_base().

Some usefull Twig usage:

* Print a block: {{ ‘module_name:block_delta’ | drupalBlock }}
* Print a view : {{ view_name’ | drupalView }}
* Print an entity: {{ ‘user:1’ | drupalEntity }}
* Debug a varible: {{ node | kpr  }}

Define custom Twig filter is just easy:

```yaml
# at_base/config/twig_filters.yml
twig_filters:
  - [_filter_autop, _filter_autop]
```

### More…

There are  even more features, some more in issue queue. But before going so far, I think we need some feedbacks. Please download and try it https://github.com/andytruong/at_base

**Andy Truong**
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
